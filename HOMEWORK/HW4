1. 計算字串中字母出現的次數
function countLetters(str) {
  const map = new Map();
  for (const char of str) {
    map.set(char, (map.get(char) || 0) + 1);
  }
  return map;
}

console.log(countLetters("banana")); 
// Map { 'b' => 1, 'a' => 3, 'n' => 2 }
2. 陣列去重並排序
function uniqueSorted(arr) {
  return [...new Set(arr)].sort((a, b) => a - b);
}

console.log(uniqueSorted([5, 3, 8, 3, 1, 5, 8])); 
// [1, 3, 5, 8]
3. 計算陣列數字總和
function sumArray(arr) {
  return arr.reduce((sum, num) => sum + num, 0);
}

console.log(sumArray([1, 2, 3, 4])); 
// 10
4. 物件深度合併
function deepMerge(obj1, obj2) {
  const result = { ...obj1 };
  for (const key in obj2) {
    if (
      obj2.hasOwnProperty(key) &&
      typeof obj2[key] === 'object' &&
      obj2[key] !== null &&
      typeof result[key] === 'object' &&
      result[key] !== null
    ) {
      result[key] = deepMerge(result[key], obj2[key]);
    } else {
      result[key] = obj2[key];
    }
  }
  return result;
}

const obj1 = { a: 1, b: { x: 2, y: 3 } };
const obj2 = { b: { y: 5, z: 6 }, c: 7 };
console.log(deepMerge(obj1, obj2));
/*
{
  a: 1,
  b: { x: 2, y: 5, z: 6 },
  c: 7
}
*/
5. 類別與繼承
class Animal {
  constructor(name) {
    this.name = name;
  }

  speak() {
    return `I am ${this.name}`;
  }
}

class Dog extends Animal {
  speak() {
    return `Woof! I am ${this.name}`;
  }
}

const dog = new Dog("Buddy");
console.log(dog.speak()); 
// "Woof! I am Buddy"
6. 用函數作為參數來實現自訂過濾
function filterArray(arr, predicate) {
  return arr.filter(predicate);
}

console.log(filterArray([1, 2, 3, 4, 5], n => n % 2 === 0)); 
// [2, 4]
7. 向量類別：加、減、內積
class Vector {
  constructor(components) {
    this.components = components;
  }

  add(other) {
    return new Vector(this.components.map((v, i) => v + other.components[i]));
  }

  sub(other) {
    return new Vector(this.components.map((v, i) => v - other.components[i]));
  }

  dot(other) {
    return this.components.reduce((sum, v, i) => sum + v * other.components[i], 0);
  }

  toString() {
    return `Vector(${this.components.join(', ')})`;
  }
}

let a = new Vector([1, 2, 3]);
let b = new Vector([4, 5, 6]);

console.log(a.add(b).sub(b).dot(b)); 
// 結果是 32
